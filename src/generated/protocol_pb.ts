// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file protocol.proto (package dev.restate.service.protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Empty, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Type: 0x0000 + 0
 *
 * @generated from message dev.restate.service.protocol.StartMessage
 */
export class StartMessage extends Message<StartMessage> {
  /**
   * @generated from field: bytes invocation_id = 1;
   */
  invocationId = new Uint8Array(0);

  /**
   * @generated from field: bytes instance_key = 2;
   */
  instanceKey = new Uint8Array(0);

  /**
   * @generated from field: uint32 known_service_version = 3;
   */
  knownServiceVersion = 0;

  /**
   * @generated from field: uint32 known_entries = 4;
   */
  knownEntries = 0;

  constructor(data?: PartialMessage<StartMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "dev.restate.service.protocol.StartMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "invocation_id",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 2,
      name: "instance_key",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 3,
      name: "known_service_version",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 4,
      name: "known_entries",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): StartMessage {
    return new StartMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): StartMessage {
    return new StartMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): StartMessage {
    return new StartMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: StartMessage | PlainMessage<StartMessage> | undefined,
    b: StartMessage | PlainMessage<StartMessage> | undefined
  ): boolean {
    return proto3.util.equals(StartMessage, a, b);
  }
}

/**
 * Type: 0x0000 + 1
 * Note: Completions that are simply acks will use this frame without sending back any result
 *
 * @generated from message dev.restate.service.protocol.CompletionMessage
 */
export class CompletionMessage extends Message<CompletionMessage> {
  /**
   * @generated from field: uint32 entry_index = 1;
   */
  entryIndex = 0;

  /**
   * @generated from oneof dev.restate.service.protocol.CompletionMessage.result
   */
  result:
    | {
        /**
         * @generated from field: google.protobuf.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
      }
    | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
      }
    | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CompletionMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "dev.restate.service.protocol.CompletionMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "entry_index",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 13, name: "empty", kind: "message", T: Empty, oneof: "result" },
    {
      no: 14,
      name: "value",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      oneof: "result",
    },
    { no: 15, name: "failure", kind: "message", T: Failure, oneof: "result" },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CompletionMessage {
    return new CompletionMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CompletionMessage {
    return new CompletionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CompletionMessage {
    return new CompletionMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: CompletionMessage | PlainMessage<CompletionMessage> | undefined,
    b: CompletionMessage | PlainMessage<CompletionMessage> | undefined
  ): boolean {
    return proto3.util.equals(CompletionMessage, a, b);
  }
}

/**
 * Kind: Completable JournalEntry
 * Type: 0x0400 + 0
 *
 * @generated from message dev.restate.service.protocol.PollInputStreamEntryMessage
 */
export class PollInputStreamEntryMessage extends Message<PollInputStreamEntryMessage> {
  /**
   * @generated from field: bytes value = 14;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<PollInputStreamEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.PollInputStreamEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 14, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PollInputStreamEntryMessage {
    return new PollInputStreamEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PollInputStreamEntryMessage {
    return new PollInputStreamEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PollInputStreamEntryMessage {
    return new PollInputStreamEntryMessage().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | PollInputStreamEntryMessage
      | PlainMessage<PollInputStreamEntryMessage>
      | undefined,
    b:
      | PollInputStreamEntryMessage
      | PlainMessage<PollInputStreamEntryMessage>
      | undefined
  ): boolean {
    return proto3.util.equals(PollInputStreamEntryMessage, a, b);
  }
}

/**
 * Kind: Ack-able JournalEntry
 * Type: 0x0400 + 1
 *
 * @generated from message dev.restate.service.protocol.OutputStreamEntryMessage
 */
export class OutputStreamEntryMessage extends Message<OutputStreamEntryMessage> {
  /**
   * @generated from oneof dev.restate.service.protocol.OutputStreamEntryMessage.result
   */
  result:
    | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
      }
    | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OutputStreamEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.OutputStreamEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 14,
      name: "value",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      oneof: "result",
    },
    { no: 15, name: "failure", kind: "message", T: Failure, oneof: "result" },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OutputStreamEntryMessage {
    return new OutputStreamEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OutputStreamEntryMessage {
    return new OutputStreamEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OutputStreamEntryMessage {
    return new OutputStreamEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | OutputStreamEntryMessage
      | PlainMessage<OutputStreamEntryMessage>
      | undefined,
    b:
      | OutputStreamEntryMessage
      | PlainMessage<OutputStreamEntryMessage>
      | undefined
  ): boolean {
    return proto3.util.equals(OutputStreamEntryMessage, a, b);
  }
}

/**
 * Kind: Completable JournalEntry
 * Type: 0x0800 + 0
 *
 * @generated from message dev.restate.service.protocol.GetStateEntryMessage
 */
export class GetStateEntryMessage extends Message<GetStateEntryMessage> {
  /**
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * @generated from oneof dev.restate.service.protocol.GetStateEntryMessage.result
   */
  result:
    | {
        /**
         * @generated from field: google.protobuf.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
      }
    | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetStateEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.GetStateEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "empty", kind: "message", T: Empty, oneof: "result" },
    {
      no: 14,
      name: "value",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      oneof: "result",
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetStateEntryMessage {
    return new GetStateEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetStateEntryMessage {
    return new GetStateEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetStateEntryMessage {
    return new GetStateEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetStateEntryMessage | PlainMessage<GetStateEntryMessage> | undefined,
    b: GetStateEntryMessage | PlainMessage<GetStateEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(GetStateEntryMessage, a, b);
  }
}

/**
 * Kind: Ack-able JournalEntry
 * Type: 0x0800 + 1
 *
 * @generated from message dev.restate.service.protocol.SetStateEntryMessage
 */
export class SetStateEntryMessage extends Message<SetStateEntryMessage> {
  /**
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SetStateEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.SetStateEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetStateEntryMessage {
    return new SetStateEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetStateEntryMessage {
    return new SetStateEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetStateEntryMessage {
    return new SetStateEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: SetStateEntryMessage | PlainMessage<SetStateEntryMessage> | undefined,
    b: SetStateEntryMessage | PlainMessage<SetStateEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(SetStateEntryMessage, a, b);
  }
}

/**
 * Kind: Ack-able JournalEntry
 * Type: 0x0800 + 2
 *
 * @generated from message dev.restate.service.protocol.ClearStateEntryMessage
 */
export class ClearStateEntryMessage extends Message<ClearStateEntryMessage> {
  /**
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<ClearStateEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.ClearStateEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ClearStateEntryMessage {
    return new ClearStateEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ClearStateEntryMessage {
    return new ClearStateEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ClearStateEntryMessage {
    return new ClearStateEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | ClearStateEntryMessage
      | PlainMessage<ClearStateEntryMessage>
      | undefined,
    b: ClearStateEntryMessage | PlainMessage<ClearStateEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(ClearStateEntryMessage, a, b);
  }
}

/**
 * Kind: Completable JournalEntry
 * Type: 0x0C00 + 0
 *
 * @generated from message dev.restate.service.protocol.SleepEntryMessage
 */
export class SleepEntryMessage extends Message<SleepEntryMessage> {
  /**
   * Duration since UNIX Epoch
   *
   * @generated from field: int64 wake_up_time = 1;
   */
  wakeUpTime = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Empty result = 13;
   */
  result?: Empty;

  constructor(data?: PartialMessage<SleepEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "dev.restate.service.protocol.SleepEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "wake_up_time",
      kind: "scalar",
      T: 3 /* ScalarType.INT64 */,
    },
    { no: 13, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SleepEntryMessage {
    return new SleepEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SleepEntryMessage {
    return new SleepEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SleepEntryMessage {
    return new SleepEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: SleepEntryMessage | PlainMessage<SleepEntryMessage> | undefined,
    b: SleepEntryMessage | PlainMessage<SleepEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(SleepEntryMessage, a, b);
  }
}

/**
 * Kind: Completable JournalEntry
 * Type: 0x0C00 + 1
 *
 * @generated from message dev.restate.service.protocol.InvokeEntryMessage
 */
export class InvokeEntryMessage extends Message<InvokeEntryMessage> {
  /**
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * @generated from field: string method_name = 2;
   */
  methodName = "";

  /**
   * @generated from field: bytes parameter = 3;
   */
  parameter = new Uint8Array(0);

  /**
   * @generated from oneof dev.restate.service.protocol.InvokeEntryMessage.result
   */
  result:
    | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
      }
    | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<InvokeEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "dev.restate.service.protocol.InvokeEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "service_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: "method_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: "parameter", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    {
      no: 14,
      name: "value",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      oneof: "result",
    },
    { no: 15, name: "failure", kind: "message", T: Failure, oneof: "result" },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): InvokeEntryMessage {
    return new InvokeEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): InvokeEntryMessage {
    return new InvokeEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): InvokeEntryMessage {
    return new InvokeEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: InvokeEntryMessage | PlainMessage<InvokeEntryMessage> | undefined,
    b: InvokeEntryMessage | PlainMessage<InvokeEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(InvokeEntryMessage, a, b);
  }
}

/**
 * Kind: Ack-able JournalEntry
 * Type: 0x0C00 + 2
 *
 * @generated from message dev.restate.service.protocol.BackgroundInvokeEntryMessage
 */
export class BackgroundInvokeEntryMessage extends Message<BackgroundInvokeEntryMessage> {
  /**
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * @generated from field: string method_name = 2;
   */
  methodName = "";

  /**
   * @generated from field: bytes parameter = 3;
   */
  parameter = new Uint8Array(0);

  constructor(data?: PartialMessage<BackgroundInvokeEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.BackgroundInvokeEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "service_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: "method_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: "parameter", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BackgroundInvokeEntryMessage {
    return new BackgroundInvokeEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BackgroundInvokeEntryMessage {
    return new BackgroundInvokeEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BackgroundInvokeEntryMessage {
    return new BackgroundInvokeEntryMessage().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | BackgroundInvokeEntryMessage
      | PlainMessage<BackgroundInvokeEntryMessage>
      | undefined,
    b:
      | BackgroundInvokeEntryMessage
      | PlainMessage<BackgroundInvokeEntryMessage>
      | undefined
  ): boolean {
    return proto3.util.equals(BackgroundInvokeEntryMessage, a, b);
  }
}

/**
 * Kind: Completable JournalEntry
 * Type: 0x0C00 + 3
 *
 * @generated from message dev.restate.service.protocol.AwakeableEntryMessage
 */
export class AwakeableEntryMessage extends Message<AwakeableEntryMessage> {
  /**
   * @generated from oneof dev.restate.service.protocol.AwakeableEntryMessage.result
   */
  result:
    | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
      }
    | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AwakeableEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.AwakeableEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 14,
      name: "value",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      oneof: "result",
    },
    { no: 15, name: "failure", kind: "message", T: Failure, oneof: "result" },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AwakeableEntryMessage {
    return new AwakeableEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AwakeableEntryMessage {
    return new AwakeableEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AwakeableEntryMessage {
    return new AwakeableEntryMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: AwakeableEntryMessage | PlainMessage<AwakeableEntryMessage> | undefined,
    b: AwakeableEntryMessage | PlainMessage<AwakeableEntryMessage> | undefined
  ): boolean {
    return proto3.util.equals(AwakeableEntryMessage, a, b);
  }
}

/**
 * Kind: Ack-able JournalEntry
 * Type: 0x0C00 + 4
 *
 * @generated from message dev.restate.service.protocol.CompleteAwakeableEntryMessage
 */
export class CompleteAwakeableEntryMessage extends Message<CompleteAwakeableEntryMessage> {
  /**
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * @generated from field: bytes instance_key = 2;
   */
  instanceKey = new Uint8Array(0);

  /**
   * @generated from field: bytes invocation_id = 3;
   */
  invocationId = new Uint8Array(0);

  /**
   * @generated from field: uint32 entry_index = 4;
   */
  entryIndex = 0;

  /**
   * @generated from field: bytes payload = 5;
   */
  payload = new Uint8Array(0);

  constructor(data?: PartialMessage<CompleteAwakeableEntryMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName =
    "dev.restate.service.protocol.CompleteAwakeableEntryMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "service_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: "instance_key",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 3,
      name: "invocation_id",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 4,
      name: "entry_index",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 5, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CompleteAwakeableEntryMessage {
    return new CompleteAwakeableEntryMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CompleteAwakeableEntryMessage {
    return new CompleteAwakeableEntryMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CompleteAwakeableEntryMessage {
    return new CompleteAwakeableEntryMessage().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | CompleteAwakeableEntryMessage
      | PlainMessage<CompleteAwakeableEntryMessage>
      | undefined,
    b:
      | CompleteAwakeableEntryMessage
      | PlainMessage<CompleteAwakeableEntryMessage>
      | undefined
  ): boolean {
    return proto3.util.equals(CompleteAwakeableEntryMessage, a, b);
  }
}

/**
 * @generated from message dev.restate.service.protocol.Failure
 */
export class Failure extends Message<Failure> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<Failure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "dev.restate.service.protocol.Failure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Failure {
    return new Failure().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Failure {
    return new Failure().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Failure {
    return new Failure().fromJsonString(jsonString, options);
  }

  static equals(
    a: Failure | PlainMessage<Failure> | undefined,
    b: Failure | PlainMessage<Failure> | undefined
  ): boolean {
    return proto3.util.equals(Failure, a, b);
  }
}
